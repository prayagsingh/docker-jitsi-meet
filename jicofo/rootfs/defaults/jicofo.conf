{{ $ENABLE_BRIDGE_HEALTH_CHECK := .Env.JICOFO_ENABLE_BRIDGE_HEALTH_CHECKS | default "0" | toBool }}
{{ $ENABLE_CODEC_VP8 := .Env.ENABLE_CODEC_VP8 | default "0" | toBool }}
{{ $ENABLE_CODEC_VP9 := .Env.ENABLE_CODEC_VP9 | default "1" | toBool }}
{{ $ENABLE_CODEC_H264 := .Env.ENABLE_CODEC_H264 | default "0" | toBool }}
{{ $ENABLE_INTERNAL_HEALTH_CHECK := .Env.JICOFO_ENABLE_INTERNAL_HEALTH_CHECKS | default "0" | toBool }}
{{ $ENABLE_RECORDING := .Env.ENABLE_RECORDING | default "0" | toBool }}
{{ $ENABLE_JIBRI_SIP := .Env.ENABLE_JIBRI_SIP | default "0" | toBool }}
{{ $ENABLE_OCTO := .Env.TESTING_OCTO_PROBABILITY | default "0" | toBool }}
{{ $ENABLE_REST := .Env.ENABLE_REST | default "1" | toBool }}
{{ $ENABLE_SCTP := .Env.ENABLE_SCTP | default "0" | toBool }}

jicofo {
    // Configuration related to jitsi-videobridge
    bridge {
      // The maximum number of participants in a single conference to put on one bridge (use -1 for no maximum).
      max-bridge-participants = "{{ .Env.MAX_BRIDGE_PARTICIPANTS | default "-1" }}"

      // The assumed maximum packet rate that a bridge can handle.
      max-bridge-packet-rate = "{{ .Env.MAX_BRIDGE_PACKET_RATE | default "50000" }}"

      // The assumed average packet rate per participant.
      average-participant-packet-rate-pps = "{{ .Env.AVG_PARTICIPANT_PACKET_RATE_PPS | default "500" }}"

      // The assumed average stress per participant.
      average-participant-stress = "{{ .Env.AVG_PARTICIPANT_STRESS | default "0.01" }}"

      // The assumed time that an endpoint takes to start contributing fully to the load on a bridge. To avoid allocating
      // a burst of endpoints to the same bridge, the bridge stress is adjusted by adding the number of new endpoints
      // in the last [participant-rampup-time] multiplied by [average-participant-stress].
      participant-rampup-interval = "{{ .Env.PARTICIPANT_RAMPUP_INTERVAL | default "20 seconds" }}"

      // The stress level above which a bridge is considered overstressed.
      stress-threshold = "{{ .Env.BRIDGE_STRESS_THRESHHOLD | default "0.08" }}"

      // The amount of to wait before retrying using a failed bridge.
      failure-reset-threshold = "{{ .Env.FAILURE_RESET_THRESHOLD | default "1 minute" }}"

      // The bridge selection strategy. The built-in strategies are:
      // SingleBridgeSelectionStrategy: Use the least loaded bridge, do not split a conference between bridges (Octo).
      // SplitBridgeSelectionStrategy: Use a separate bridge for each participant (for testing).
      // RegionBasedBridgeSelectionStrategy: Attempt to put each participant in a bridge in their local region (i.e. use
      //    Octo for geo-location).
      // IntraRegionBridgeSelectionStrategy: Use additional bridges when a bridge becomes overloaded (i.e. use Octo for
      //    load balancing).
      //
      // Additionally, you can use the fully qualified class name for custom BridgeSelectionStrategy implementations.
      selection-strategy = "{{ .Env.BRIDGE_SELECTION_STRATEGY | default "SingleBridgeSelectionStrategy" }}"

      {{ if $ENABLE_BRIDGE_HEALTH_CHECK }}
      health-checks {
        // Whether jicofo should perform periodic health checks to the connected bridges.
        enabled = true
        // The interval at which to perform health checks.
        interval = "{{ .Env.BRIDGE_HEALTH_CHECK_INTERVAL | default "10 seconds" }}"
        // When a health checks times out, jicofo will retry and only consider it fail after the retry fails. This
        // configures the delay between the original health check timing out and the second health check being sent.
        // It is a duration and defaults to half the [interval].
        # retry-delay = 5 seconds
      }
      {{ end }}
  
      // The JID of the MUC to be used as a brewery for bridge instances.
      brewery-jid = "{{ .Env.JVB_BREWERY_MUC }}@{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}"
    }
    // Configure the codecs and RTP extensions to be used in the offer sent to clients.
    codec {
      video {
        {{ if $ENABLE_CODEC_VP8 }}  
        vp8 {
          enabled = true
          pt = 100
          // Payload type for the associated RTX stream. Set to -1 to disable RTX.
          rtx-pt = 96
        }
        {{ end }}

        {{ if $ENABLE_CODEC_VP9 }}
        vp9 {
          enabled = true
          pt = 101
          // Payload type for the associated RTX stream. Set to -1 to disable RTX.
          rtx-pt = 97
        }
        {{ end }}

        {{ if $ENABLE_CODEC_H264 }}
        h264 {
          enabled = true
          pt = 107
          // Payload type for the associated RTX stream. Set to -1 to disable RTX.
          rtx-pt = 99
        }
        {{ end }}
      }
  
      audio {
        # isac-16000 {
        #   enabled = true
        #   pt = 103
        # }
        # isac-32000 {
        #   enabled = true
        #   pt = 104
        # }
        opus {
          enabled = true
          pt = 111
          minptime = 10
          use-inband-fec = true
          red {
            enabled = false
            pt = 112
          }
        }
        # telephone-event {
        #    enabled = true
        #    pt = 126
        # }
      }
  
      // RTP header extensions: Real Time Transport Protocol(L7 proto work over L4(UDP))
      rtp-extensions {
        audio-level {
          enabled = true
          id = 1
        }
        tof {
          // TOF is currently disabled, because we don't support it in the bridge
          // (and currently clients seem to not use it when abs-send-time is
          // available).
          enabled = false
          id = 2
        }
        abs-send-time {
          enabled = true
          id = 3
        }
        rid {
          enabled = false
          id = 4
        }
        tcc {
          enabled = true
          id = 5
        }
        video-content-type {
          enabled = false
          id = 7
        }
        framemarking {
          enabled = false
          id = 9
        }
      }
    }
  
    conference {
      // Whether to automatically grant the 'owner' role to the first participant in the conference (and subsequently to
      // the next in line when the current owner leaves).
      enable-auto-owner = "{{ .Env.ENABLE_AUTO_OWNER | default "true" | toBool }}"
  
      // How long to wait for the initial participant in a conference.
      initial-timeout = "{{ .Env.INITIAL_PARTICIPANT_TIMEOUT | default "15 seconds" }}"
  
      // Whether jicofo should inject a random SSRC for endpoints which don't advertise any SSRCs. This is a temporary
      // workaround for an issue with signaling endpoints for Octo.
      // ssrc: Synchronization source identifier uniquely identifies the source of a stream.
      inject-ssrc-for-recv-only-endpoints = false
  
      max-ssrcs-per-user = 20
  
      // How long a participant's media session will be kept alive once it remains the only participant in the room.
      single-participant-timeout = 20 seconds
    }
  
    // Configuration for the internal health checks performed by jicofo.
    {{ if $ENABLE_INTERNAL_HEALTH_CHECK }}
    health {
      // Whether to perform health checks.
      enabled = true
  
      // The interval between health checks. If set to 0, periodic health checks will not be performed.
      interval = "{{ .Env.INTERNAL_HEALTH_CHECK_INTERVAL | default "10 seconds" }}"
  
      # The timeout for a health check
      timeout = "{{ .Env.INTERNAL_HEALTH_CHECK_TIMEOUT | default "30 seconds" }}"
  
      # If performing a health check takes longer than this, it is considered unsuccessful.
      max-check-duration = "{{ .Env.INTERNAL_HEALTH_CHECK_MAX_CHECK_DURATION | default "20 seconds" }}"
  
      # The prefix to use when creating MUC rooms for the purpose of health checks.
      room-name-prefix = "__jicofo-health-check"
    }
    {{ end }}
  
    {{ if $ENABLE_RECORDING }}
    jibri {
      // The JID of the MUC to be used as a brewery for jibri instances for streaming.
      brewery-jid = "{{ .Env.JIBRI_BREWERY_MUC}}@{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}"
  
      // How many times to retry a given Jibri request before giving up. Set to -1 to allow infinite retries.
      num-retries = "{{ .Env.JIBRI_REQUEST_RETRIES | default "5" }}"
  
      // How long to wait for Jibri to start recording from the time it accepts a START request.
      pending-timeout = "{{ .Env.JIBRI_PENDING_TIMEOUT | default "90 seconds" }}"
    }
    {{ end }}
  
    {{ if $ENABLE_JIBRI_SIP }}
    jibri-sip {
      // The JID of the MUC to be used as a brewery for jibri instances for SIP.
      # brewery-jid = "jibrisipbrewery@example.com"
    }
    {{ end }}
  
    {{ if and .Env.JIGASI_SIP_URI .Env.JIGASI_BREWERY_MUC }}
    jigasi {
      // The JID of the MUC to be used as a brewery for jigasi instances.
      brewery-jid = "{{ .Env.JIGASI_BREWERY_MUC}}@{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}"
    }
    {{ end }}
  
    // The region in which the machine is running.
    #local-region="us-east-1"
    
    #{{ if $ENABLE_OCTO }}
    octo {
      // An identifier of the Jicofo instance, used for the purpose of generating conference IDs unique across a set of
      // Jicofo instances. Valid values are [1, 65535]. The value 0 is used when none is explicitly configured.
      id = "{{ .Env.JICOFO_SHORT_ID | default "1" }}"
    }
    #{{ end }}

    {{ if $ENABLE_REST }}
    rest {
      port = 8888
      #tls-port = 8843
    }
    {{ end }}

    {{ if $ENABLE_SCTP }}
    sctp {
      // Whether to allocate SCTP channels on the bridge (only when the client advertises support, and SCTP is
      // enabled in the per-conference configuration).
      enabled = true
    }
    {{ end }}

    task-pools {
      shared-pool-max-threads = 1500
    }
  
    xmpp {
      // The separate XMPP connection used for communication with clients (endpoints).
      client {
        enabled = true
        hostname = "{{ .Env.XMPP_SERVER }}"
        port = 5222
        domain = "{{ .Env.XMPP_AUTH_DOMAIN }}"
        username = "{{ .Env.JICOFO_AUTH_USER }}"
        password = "{{ .Env.JICOFO_AUTH_PASSWORD }}"
  
        // How long to wait for a response to a stanza before giving up.
        reply-timeout = 15 seconds
  
        // The JID/domain of the MUC service used for conferencing.
        conference-muc-jid = "{{ first (splitList "." .Env.XMPP_MUC_DOMAIN) }}"
  
        // A flag to suppress the TLS certificate verification.
        disable-certificate-verification = true
      }
      // The separate XMPP connection used for internal services (currently only jitsi-videobridge).
    #   service {
    #     enabled = true
    #     hostname = "{{ .Env.XMPP_SERVER }}"
    #     port = 6222
    #     domain = "{{ .Env.XMPP_AUTH_DOMAIN }}"
    #     username = 
    #     password =
  
    #     // How long to wait for a response to a stanza before giving up.
    #     reply-timeout = 15 seconds
  
    #     // A flag to suppress the TLS certificate verification.
    #     disable-certificate-verification = false
    #   }
  
      // How often XMPP components re-discovery will be performed. If set to 0, re-discovery will not be performed.
       rediscovery-interval = 0 seconds
    }
  }
